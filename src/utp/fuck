warning: unused import: `MIN_RTO_MICROS`
 --> src/utp/reliability.rs:4:46
  |
4 | use crate::utp::common::{INITIAL_RTO_MICROS, MIN_RTO_MICROS, MAX_RTO_MICROS, ST_SYN, seq_eq_or_greater_than};
  |                                              ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition value: `logging`
   --> src/utp/socket_manager.rs:306:11
    |
306 |     #[cfg(feature = "logging")]
    |           ^^^^^^^^^^^^^^^^^^^ help: remove the condition
    |
    = note: no expected values for `feature`
    = help: consider adding `logging` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused import: `socket::UtpSocket`
  --> src/utp/mod.rs:17:9
   |
17 | pub use socket::UtpSocket;
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `stream::UtpStream`
  --> src/utp/mod.rs:18:9
   |
18 | pub use stream::UtpStream; // If you implement a UtpStream similar to rust-utp[2]
   |         ^^^^^^^^^^^^^^^^^

warning: unused import: `common::UtpError`
  --> src/utp/mod.rs:19:9
   |
19 | pub use common::UtpError;
   |         ^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
  --> src/utp/stream.rs:55:25
   |
55 |                     let mut socket_guard = stream.socket.lock().unwrap();
   |                         ----^^^^^^^^^^^^
   |                         |
   |                         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/utp/stream.rs:100:25
    |
100 |                     let mut socket_guard = self.socket.lock().unwrap();
    |                         ----^^^^^^^^^^^^
    |                         |
    |                         help: remove this `mut`

warning: unused variable: `rm`
  --> src/utp/connection.rs:97:9
   |
97 |         rm: &ReliabilityManager,
   |         ^^ help: if this is intentional, prefix it with an underscore: `_rm`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `timestamp_micros`
   --> src/utp/congestion.rs:160:9
    |
160 |         timestamp_micros: u32,
    |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timestamp_micros`

warning: variable does not need to be mutable
   --> src/utp/stream.rs:136:21
    |
136 |                 let mut socket_guard = socket.lock().unwrap();
    |                     ----^^^^^^^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: unused variable: `data`
  --> src/main.rs:46:45
   |
46 |     pub fn verify_piece(piece_index: usize, data: &[u8]) -> bool {
   |                                             ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: constant `ST_NUM_STATES` is never used
  --> src/utp/common.rs:15:11
   |
15 | pub const ST_NUM_STATES: u8 = 5; // Total number of packet types
   |           ^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: constant `MIN_RTO_MICROS` is never used
  --> src/utp/common.rs:22:11
   |
22 | pub const MIN_RTO_MICROS: u32 = 500_000; // Minimum RTO 500ms
   |           ^^^^^^^^^^^^^^

warning: constant `UDP_IPV4_OVERHEAD` is never used
  --> src/utp/common.rs:26:11
   |
26 | pub const UDP_IPV4_OVERHEAD: usize = 20 /* IP */ + 8 /* UDP */;
   |           ^^^^^^^^^^^^^^^^^

warning: constant `UDP_IPV6_OVERHEAD` is never used
  --> src/utp/common.rs:27:11
   |
27 | pub const UDP_IPV6_OVERHEAD: usize = 40 /* IP */ + 8 /* UDP */;
   |           ^^^^^^^^^^^^^^^^^

warning: constant `SEQ_NR_MASK` is never used
  --> src/utp/common.rs:31:11
   |
31 | pub const SEQ_NR_MASK: u16 = 0xFFFF;
   |           ^^^^^^^^^^^

warning: constant `ACK_NR_MASK` is never used
  --> src/utp/common.rs:32:11
   |
32 | pub const ACK_NR_MASK: u16 = 0xFFFF;
   |           ^^^^^^^^^^^

warning: constant `TIMESTAMP_MASK` is never used
  --> src/utp/common.rs:33:11
   |
33 | pub const TIMESTAMP_MASK: u32 = 0xFFFFFFFF;
   |           ^^^^^^^^^^^^^^

warning: constant `DUPLICATE_ACKS_BEFORE_RESEND` is never used
  --> src/utp/common.rs:36:11
   |
36 | pub const DUPLICATE_ACKS_BEFORE_RESEND: u32 = 3;
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `ACK_NR_ALLOWED_WINDOW` is never used
  --> src/utp/common.rs:37:11
   |
37 | pub const ACK_NR_ALLOWED_WINDOW: u32 = DUPLICATE_ACKS_BEFORE_RESEND;
   |           ^^^^^^^^^^^^^^^^^^^^^

warning: constant `MAX_WINDOW_DECAY` is never used
  --> src/utp/common.rs:38:11
   |
38 | pub const MAX_WINDOW_DECAY: i64 = 100; // ms
   |           ^^^^^^^^^^^^^^^^

warning: constant `TIMEOUT_CHECK_INTERVAL` is never used
  --> src/utp/common.rs:41:11
   |
41 | pub const TIMEOUT_CHECK_INTERVAL: u64 = 500; // ms
   |           ^^^^^^^^^^^^^^^^^^^^^^

warning: constant `KEEPALIVE_INTERVAL` is never used
  --> src/utp/common.rs:42:11
   |
42 | pub const KEEPALIVE_INTERVAL: u64 = 29000; // 29 seconds
   |           ^^^^^^^^^^^^^^^^^^

warning: constant `CONNECT_TIMEOUT` is never used
  --> src/utp/common.rs:43:11
   |
43 | pub const CONNECT_TIMEOUT: u64 = 6000; // 6 seconds
   |           ^^^^^^^^^^^^^^^

warning: constant `DELAYED_ACK_TIME` is never used
  --> src/utp/common.rs:44:11
   |
44 | pub const DELAYED_ACK_TIME: u64 = 20; // 20ms before sending delayed ACK
   |           ^^^^^^^^^^^^^^^^

warning: constant `REORDER_BUFFER_SIZE` is never used
  --> src/utp/common.rs:47:11
   |
47 | pub const REORDER_BUFFER_SIZE: usize = 32;
   |           ^^^^^^^^^^^^^^^^^^^

warning: constant `REORDER_BUFFER_MAX_SIZE` is never used
  --> src/utp/common.rs:48:11
   |
48 | pub const REORDER_BUFFER_MAX_SIZE: usize = 1024;
   |           ^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `OUTGOING_BUFFER_MAX_SIZE` is never used
  --> src/utp/common.rs:49:11
   |
49 | pub const OUTGOING_BUFFER_MAX_SIZE: usize = 1024;
   |           ^^^^^^^^^^^^^^^^^^^^^^^^

warning: variants `Uninitialized` and `SynRecv` are never constructed
  --> src/utp/common.rs:54:5
   |
53 | pub enum ConnectionState {
   |          --------------- variants in this enum
54 |     Uninitialized,       // Initial state
   |     ^^^^^^^^^^^^^
...
57 |     SynRecv,             // Connect received
   |     ^^^^^^^
   |
   = note: `ConnectionState` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: method `to_string` is never used
  --> src/utp/common.rs:68:12
   |
67 | impl ConnectionState {
   | -------------------- method in this implementation
68 |     pub fn to_string(&self) -> &'static str {
   |            ^^^^^^^^^

warning: variants `Timeout`, `ConnectionRefused`, `ConnectionReset`, `InvalidPacket`, `MaxRetransmit`, and `WindowTooSmall` are never constructed
   --> src/utp/common.rs:90:5
    |
88  | pub enum UtpError {
    |          -------- variants in this enum
89  |     #[error("Connection timed out")]
90  |     Timeout,
    |     ^^^^^^^
...
93  |     ConnectionRefused,
    |     ^^^^^^^^^^^^^^^^^
...
96  |     ConnectionReset,
    |     ^^^^^^^^^^^^^^^
...
102 |     InvalidPacket,
    |     ^^^^^^^^^^^^^
...
114 |     MaxRetransmit,
    |     ^^^^^^^^^^^^^
...
117 |     WindowTooSmall,
    |     ^^^^^^^^^^^^^^
    |
    = note: `UtpError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variants `PayloadBandwidth`, `HeaderOverhead`, `AckOverhead`, `ConnectOverhead`, and `CloseOverhead` are never constructed
   --> src/utp/common.rs:122:5
    |
121 | pub enum BandwidthType {
    |          ------------- variants in this enum
122 |     PayloadBandwidth,
    |     ^^^^^^^^^^^^^^^^
123 |     HeaderOverhead,
    |     ^^^^^^^^^^^^^^
124 |     AckOverhead,
    |     ^^^^^^^^^^^
125 |     ConnectOverhead,
    |     ^^^^^^^^^^^^^^^
126 |     CloseOverhead,
    |     ^^^^^^^^^^^^^
    |
    = note: `BandwidthType` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: associated items `now`, `wrapping_sub`, and `as_millis` are never used
   --> src/utp/common.rs:135:12
    |
133 | impl Timestamp {
    | -------------- associated items in this implementation
134 |     /// Get the current time as a microsecond timestamp
135 |     pub fn now() -> Self {
    |            ^^^
...
140 |     pub fn wrapping_sub(self, other: Self) -> u32 {
    |            ^^^^^^^^^^^^
...
146 |     pub fn as_millis(&self) -> u64 {
    |            ^^^^^^^^^

warning: function `current_millis` is never used
   --> src/utp/common.rs:192:8
    |
192 | pub fn current_millis() -> u64 {
    |        ^^^^^^^^^^^^^^

warning: function `random_u16` is never used
   --> src/utp/common.rs:197:8
    |
197 | pub fn random_u16() -> u16 {
    |        ^^^^^^^^^^

warning: function `random_u32` is never used
   --> src/utp/common.rs:202:8
    |
202 | pub fn random_u32() -> u32 {
    |        ^^^^^^^^^^

warning: field `duplicate_acks_received` is never read
   --> src/utp/common.rs:216:9
    |
208 | pub struct UtpSocketStats {
    |            -------------- field in this struct
...
216 |     pub duplicate_acks_received: u64,
    |         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `UtpSocketStats` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: method `avg_rtt` is never used
   --> src/utp/common.rs:225:12
    |
223 | impl UtpSocketStats {
    | ------------------- method in this implementation
224 |     /// Calculate average RTT
225 |     pub fn avg_rtt(&self) -> u32 {
    |            ^^^^^^^

warning: struct `SackExtensionHeader` is never constructed
  --> src/utp/packet.rs:26:12
   |
26 | pub struct SackExtensionHeader {
   |            ^^^^^^^^^^^^^^^^^^^

warning: field `remote_addr` is never read
   --> src/utp/packet.rs:141:9
    |
137 | pub struct UtpPacket {
    |            --------- field in this struct
...
141 |     pub remote_addr: SocketAddr, // Source/destination address
    |         ^^^^^^^^^^^
    |
    = note: `UtpPacket` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: multiple associated items are never used
   --> src/utp/packet.rs:215:12
    |
144 | impl UtpPacket {
    | -------------- associated items in this implementation
...
215 |     pub fn total_size(&self) -> usize {
    |            ^^^^^^^^^^
...
225 |     pub fn new(
    |            ^^^
...
259 |     pub fn create_syn(
    |            ^^^^^^^^^^
...
281 |     pub fn create_data(
    |            ^^^^^^^^^^^
...
307 |     pub fn create_ack(
    |            ^^^^^^^^^^
...
332 |     pub fn create_fin(
    |            ^^^^^^^^^^
...
356 |     pub fn create_reset(
    |            ^^^^^^^^^^^^

warning: field `local_addr` is never read
  --> src/utp/socket.rs:33:16
   |
32 | pub struct UtpSocketInternal {
   |            ----------------- field in this struct
33 |     pub(crate) local_addr: SocketAddr,
   |                ^^^^^^^^^^

warning: methods `connect`, `get_rtt`, `get_mtu`, `is_send_buffer_empty`, and `get_stats` are never used
   --> src/utp/socket.rs:289:12
    |
258 | impl UtpSocket {
    | -------------- methods in this implementation
...
289 |     pub fn connect(&self) -> Result<(), UtpError> {
    |            ^^^^^^^
...
479 |     pub fn get_rtt(&self) -> u32 {
    |            ^^^^^^^
...
484 |     pub fn get_mtu(&self) -> usize {
    |            ^^^^^^^
...
489 |     pub fn is_send_buffer_empty(&self) -> bool {
    |            ^^^^^^^^^^^^^^^^^^^^
...
499 |     pub fn get_stats(&self) -> UtpSocketStats {
    |            ^^^^^^^^^

warning: associated items `new_for_listener`, `initiate_connection`, `get_seq_nr`, `get_ack_nr`, `get_sent_packets`, and `get_timestamp_values` are never used
   --> src/utp/connection.rs:68:12
    |
45  | impl Connection {
    | --------------- associated items in this implementation
...
68  |     pub fn new_for_listener(remote_addr: SocketAddr, syn_packet: &UtpPacket) -> Self {
    |            ^^^^^^^^^^^^^^^^
...
86  |     pub fn initiate_connection(&mut self) {
    |            ^^^^^^^^^^^^^^^^^^^
...
297 |     pub fn get_seq_nr(&self) -> u16 { self.seq_nr }
    |            ^^^^^^^^^^
298 |     pub fn get_ack_nr(&self) -> u16 { self.ack_nr }
    |            ^^^^^^^^^^
299 |     pub fn get_sent_packets(&self) -> &HashMap<u16, SentPacketInfo> {
    |            ^^^^^^^^^^^^^^^^
...
304 |     pub fn get_timestamp_values(&self) -> (u32, u64) {
    |            ^^^^^^^^^^^^^^^^^^^^

warning: multiple methods are never used
   --> src/utp/congestion.rs:130:12
    |
73  | impl CongestionControl {
    | ---------------------- methods in this implementation
...
130 |     pub fn can_send(&self, packet_size: usize) -> bool {
    |            ^^^^^^^^
...
323 |     pub fn on_congestion_event(&mut self) {
    |            ^^^^^^^^^^^^^^^^^^^
...
334 |     pub fn reset(&mut self) {
    |            ^^^^^
...
351 |     pub fn set_target_delay(&mut self, target_micros: u32) {
    |            ^^^^^^^^^^^^^^^^
...
356 |     pub fn set_receive_window(&mut self, window_bytes: usize) {
    |            ^^^^^^^^^^^^^^^^^^
...
361 |     pub fn get_base_delay_micros(&self) -> u32 {
    |            ^^^^^^^^^^^^^^^^^^^^^
...
366 |     pub fn get_current_queuing_delay(&self) -> u32 {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^
...
376 |     pub fn is_in_slow_start(&self) -> bool {
    |            ^^^^^^^^^^^^^^^^
...
381 |     pub fn get_slow_start_threshold(&self) -> usize {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^

warning: fields `seq_nr` and `is_syn` are never read
  --> src/utp/reliability.rs:26:9
   |
24 | pub struct SentPacketInfo {
   |            -------------- fields in this struct
25 |     /// Sequence number of the sent packet
26 |     pub seq_nr: u16,
   |         ^^^^^^
...
36 |     pub is_syn: bool,
   |         ^^^^^^
   |
   = note: `SentPacketInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: multiple methods are never used
   --> src/utp/reliability.rs:135:8
    |
108 | impl ReliabilityManager {
    | ----------------------- methods in this implementation
...
135 |     fn get_cumulative_ack_nr(&self) -> u16 {
    |        ^^^^^^^^^^^^^^^^^^^^^
...
322 |     pub fn set_needs_retransmit(&mut self, seq_nr: u16) {
    |            ^^^^^^^^^^^^^^^^^^^^
...
393 |     pub fn set_needs_ack(&mut self) {
    |            ^^^^^^^^^^^^^
...
398 |     pub fn needs_ack_packet(&self) -> bool {
    |            ^^^^^^^^^^^^^^^^
...
403 |     pub fn ack_sent(&mut self) {
    |            ^^^^^^^^
...
408 |     pub fn clear_ooo_packets(&mut self) {
    |            ^^^^^^^^^^^^^^^^^
...
413 |     pub fn verify_state_integrity(&self) -> bool {
    |            ^^^^^^^^^^^^^^^^^^^^^^
...
429 |     pub fn repair_tmr(&mut self) {
    |            ^^^^^^^^^^

warning: constant `CONNECT_TIMEOUT_SECS` is never used
  --> src/utp/stream.rs:15:7
   |
15 | const CONNECT_TIMEOUT_SECS: u64 = 10;
   |       ^^^^^^^^^^^^^^^^^^^^

warning: constant `TICK_INTERVAL_MS` is never used
  --> src/utp/stream.rs:16:7
   |
16 | const TICK_INTERVAL_MS: u64 = 50;
   |       ^^^^^^^^^^^^^^^^

warning: associated items `connect` and `close_write` are never used
  --> src/utp/stream.rs:29:18
   |
27 | impl UtpStream {
   | -------------- associated items in this implementation
28 |     /// Connects to a remote uTP peer asynchronously.
29 |     pub async fn connect(local_bind_addr: SocketAddr, remote_addr: SocketAddr) -> Result<Self, UtpError> {
   |                  ^^^^^^^
...
90 |     pub async fn close_write(&mut self) -> Result<(), UtpError> {
   |                  ^^^^^^^^^^^

warning: function `start_background_ticker` is never used
   --> src/utp/stream.rs:126:4
    |
126 | fn start_background_ticker(stream: &UtpStream) {
    |    ^^^^^^^^^^^^^^^^^^^^^^^

warning: function `announce` is never used
  --> src/main.rs:25:16
   |
25 |         pub fn announce(tracker_url: &str, torrent_hash: &str) {
   |                ^^^^^^^^

warning: function `request_piece` is never used
  --> src/main.rs:42:12
   |
42 |     pub fn request_piece(peer_id: &str, piece_index: usize) {
   |            ^^^^^^^^^^^^^

warning: function `verify_piece` is never used
  --> src/main.rs:46:12
   |
46 |     pub fn verify_piece(piece_index: usize, data: &[u8]) -> bool {
   |            ^^^^^^^^^^^^

warning: `blacktorrent` (bin "blacktorrent") generated 54 warnings (run `cargo fix --bin "blacktorrent"` to apply 7 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.06s
